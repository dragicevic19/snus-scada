//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealTimeUnit.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRealTimeUnitService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRealTimeUnitService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnitService/PubInit", ReplyAction="http://tempuri.org/IRealTimeUnitService/PubInitResponse")]
        int PubInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnitService/PubInit", ReplyAction="http://tempuri.org/IRealTimeUnitService/PubInitResponse")]
        System.Threading.Tasks.Task<int> PubInitAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRealTimeUnitService/ExportPublicKey", ReplyAction="http://tempuri.org/IRealTimeUnitService/ExportPublicKeyResponse")]
        void ExportPublicKey(int pubId, string keyPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRealTimeUnitService/ExportPublicKey", ReplyAction="http://tempuri.org/IRealTimeUnitService/ExportPublicKeyResponse")]
        System.Threading.Tasks.Task ExportPublicKeyAsync(int pubId, string keyPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRealTimeUnitService/SendValue", ReplyAction="http://tempuri.org/IRealTimeUnitService/SendValueResponse")]
        void SendValue(int pubId, string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRealTimeUnitService/SendValue", ReplyAction="http://tempuri.org/IRealTimeUnitService/SendValueResponse")]
        System.Threading.Tasks.Task SendValueAsync(int pubId, string message, byte[] signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeUnitServiceChannel : RealTimeUnit.ServiceReference.IRealTimeUnitService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeUnitServiceClient : System.ServiceModel.ClientBase<RealTimeUnit.ServiceReference.IRealTimeUnitService>, RealTimeUnit.ServiceReference.IRealTimeUnitService {
        
        public RealTimeUnitServiceClient() {
        }
        
        public RealTimeUnitServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeUnitServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int PubInit() {
            return base.Channel.PubInit();
        }
        
        public System.Threading.Tasks.Task<int> PubInitAsync() {
            return base.Channel.PubInitAsync();
        }
        
        public void ExportPublicKey(int pubId, string keyPath) {
            base.Channel.ExportPublicKey(pubId, keyPath);
        }
        
        public System.Threading.Tasks.Task ExportPublicKeyAsync(int pubId, string keyPath) {
            return base.Channel.ExportPublicKeyAsync(pubId, keyPath);
        }
        
        public void SendValue(int pubId, string message, byte[] signature) {
            base.Channel.SendValue(pubId, message, signature);
        }
        
        public System.Threading.Tasks.Task SendValueAsync(int pubId, string message, byte[] signature) {
            return base.Channel.SendValueAsync(pubId, message, signature);
        }
    }
}
