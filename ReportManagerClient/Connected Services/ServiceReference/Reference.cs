//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManagerClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmDTO", Namespace="http://schemas.datacontract.org/2004/07/CoreWCFService.AlarmModel")]
    [System.SerializableAttribute()]
    public partial class AlarmDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ReportManagerClient.ServiceReference.AlarmType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReportManagerClient.ServiceReference.AlarmType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmType", Namespace="http://schemas.datacontract.org/2004/07/CoreWCFService")]
    public enum AlarmType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOW = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIGH = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagDb", Namespace="http://schemas.datacontract.org/2004/07/CoreWCFService.TagDbModel")]
    [System.SerializableAttribute()]
    public partial class TagDb : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IReportManagerService")]
    public interface IReportManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsOverAPeriodOfTime", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsOverAPeriodOfTimeResponse")]
        ReportManagerClient.ServiceReference.AlarmDTO[] AlarmsOverAPeriodOfTime(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsOverAPeriodOfTime", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsOverAPeriodOfTimeResponse")]
        System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.AlarmDTO[]> AlarmsOverAPeriodOfTimeAsync(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsWithPriority", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsWithPriorityResponse")]
        ReportManagerClient.ServiceReference.AlarmDTO[] AlarmsWithPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsWithPriority", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsWithPriorityResponse")]
        System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.AlarmDTO[]> AlarmsWithPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/TagsOverAPeriodOfTime", ReplyAction="http://tempuri.org/IReportManagerService/TagsOverAPeriodOfTimeResponse")]
        ReportManagerClient.ServiceReference.TagDb[] TagsOverAPeriodOfTime(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/TagsOverAPeriodOfTime", ReplyAction="http://tempuri.org/IReportManagerService/TagsOverAPeriodOfTimeResponse")]
        System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> TagsOverAPeriodOfTimeAsync(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/LastValueOfAnalogInputTags", ReplyAction="http://tempuri.org/IReportManagerService/LastValueOfAnalogInputTagsResponse")]
        ReportManagerClient.ServiceReference.TagDb[] LastValueOfAnalogInputTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/LastValueOfAnalogInputTags", ReplyAction="http://tempuri.org/IReportManagerService/LastValueOfAnalogInputTagsResponse")]
        System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> LastValueOfAnalogInputTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/LastValueOfDigitalInputTags", ReplyAction="http://tempuri.org/IReportManagerService/LastValueOfDigitalInputTagsResponse")]
        ReportManagerClient.ServiceReference.TagDb[] LastValueOfDigitalInputTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/LastValueOfDigitalInputTags", ReplyAction="http://tempuri.org/IReportManagerService/LastValueOfDigitalInputTagsResponse")]
        System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> LastValueOfDigitalInputTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AllValuesOfTagWithTagName", ReplyAction="http://tempuri.org/IReportManagerService/AllValuesOfTagWithTagNameResponse")]
        ReportManagerClient.ServiceReference.TagDb[] AllValuesOfTagWithTagName(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AllValuesOfTagWithTagName", ReplyAction="http://tempuri.org/IReportManagerService/AllValuesOfTagWithTagNameResponse")]
        System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> AllValuesOfTagWithTagNameAsync(string tagName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerServiceChannel : ReportManagerClient.ServiceReference.IReportManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerServiceClient : System.ServiceModel.ClientBase<ReportManagerClient.ServiceReference.IReportManagerService>, ReportManagerClient.ServiceReference.IReportManagerService {
        
        public ReportManagerServiceClient() {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ReportManagerClient.ServiceReference.AlarmDTO[] AlarmsOverAPeriodOfTime(System.DateTime start, System.DateTime end) {
            return base.Channel.AlarmsOverAPeriodOfTime(start, end);
        }
        
        public System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.AlarmDTO[]> AlarmsOverAPeriodOfTimeAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.AlarmsOverAPeriodOfTimeAsync(start, end);
        }
        
        public ReportManagerClient.ServiceReference.AlarmDTO[] AlarmsWithPriority(int priority) {
            return base.Channel.AlarmsWithPriority(priority);
        }
        
        public System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.AlarmDTO[]> AlarmsWithPriorityAsync(int priority) {
            return base.Channel.AlarmsWithPriorityAsync(priority);
        }
        
        public ReportManagerClient.ServiceReference.TagDb[] TagsOverAPeriodOfTime(System.DateTime start, System.DateTime end) {
            return base.Channel.TagsOverAPeriodOfTime(start, end);
        }
        
        public System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> TagsOverAPeriodOfTimeAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.TagsOverAPeriodOfTimeAsync(start, end);
        }
        
        public ReportManagerClient.ServiceReference.TagDb[] LastValueOfAnalogInputTags() {
            return base.Channel.LastValueOfAnalogInputTags();
        }
        
        public System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> LastValueOfAnalogInputTagsAsync() {
            return base.Channel.LastValueOfAnalogInputTagsAsync();
        }
        
        public ReportManagerClient.ServiceReference.TagDb[] LastValueOfDigitalInputTags() {
            return base.Channel.LastValueOfDigitalInputTags();
        }
        
        public System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> LastValueOfDigitalInputTagsAsync() {
            return base.Channel.LastValueOfDigitalInputTagsAsync();
        }
        
        public ReportManagerClient.ServiceReference.TagDb[] AllValuesOfTagWithTagName(string tagName) {
            return base.Channel.AllValuesOfTagWithTagName(tagName);
        }
        
        public System.Threading.Tasks.Task<ReportManagerClient.ServiceReference.TagDb[]> AllValuesOfTagWithTagNameAsync(string tagName) {
            return base.Channel.AllValuesOfTagWithTagNameAsync(tagName);
        }
    }
}
